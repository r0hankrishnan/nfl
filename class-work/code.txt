path = "/Users/rohankrishnan/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Fall 2023/ECON 1700/hw2_nfl_final_data.xlsx"
nfl = pd.read_excel(path)

#Head function to see all variables
nfl.head()

#Move response to front of dataset
cols = list(nfl.columns.values);cols

nfl = nfl[[ 'Playoff',
 'Team',
 'off_gp',
 'off_total_yds',
 'off_total_yds_g',
 'off_pass_yds',
 'off_pass_yds_g',
 'off_rush_yds',
 'off_rush_yds_g',
 'off_pts',
 'off_pts_g',
 'def_total_yds',
 'def_total_yds_g',
 'def_pass_yds',
 'def_pass_yds_g',
 'def_rush_yds',
 'def_rush_yds_g',
 'def_pts',
 'def_pts_g',
 'kick_att',
 'kick_yds',
 'kick_avg',
 'kick_lng',
 'kick_td',
 'punt_att',
 'punt_yds',
 'punt_avg',
 'punt_lng',
 'punt_td',
 'punt_fc',
 'turn_diff',
 'take_int',
 'take_fum',
 'take_total',
 'give_int',
 'give_fum',
 'give_total',
 'record',
 'rat',
 'pwr',
 'off',
 'def',
 'hfa',
 'sos',
 'Year',]]

#Describe function to see distributions of the variables
nfl.describe()

#Make sure there are no NA values
nfl.isna().sum()

#Check which variables are continuous and which are discrete
nfl.nunique()

#Import analysis packages
import seaborn as sns
#pip install joypy
import joypy

#Slightly more No than Yes-- makes sense since only 12 (and later 14) teams make it
nfl["Playoff"].value_counts()

#Conditional means
cond_means = nfl.groupby("Playoff").mean()

#   ###Takeaways from conditional means
#   off_gp: No real difference-- makes sense and will probably remove this
#   offensive stats: 1 had a higher mean than 0 for all stats
#   defensive stats: Much more even. There were a couple where 0 had a higher 
#   mean than 1 but none the other way
#   speical stats: More mixed, 1 seemed to take less kicks but were longer and 
#   scored more often --> similar trend with punts
#   Rest were as expected: 1 averaging higher on offensive stats

#Create correlation matrix
correlation_matrix = nfl.corr()

### Create a heatmap of the correlation matrix
plt.figure(figsize=(25, 20))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

# ###Correlation matrix takeaways:
#    Strongest Positive Correlations: record, rat, pwr, off, def, off_pts
#    Strongest Negative Correlations: def_pts, def_pts_g  
#    Potential Collinearity Issues: def Massey rating and defensive ESPN stats, 
#    pwr and off Massey ratings and offensive ESPN stats

#Density plot matrix with labels LFGGGG
features = nfl.columns[2:44]
nfl_features = nfl[features]
nfl_f_melt= nfl_features.melt(var_name = "cols", value_name = "vals")
sns.displot(kind='kde', data=nfl_f_melt, col='cols', col_wrap=8, x='vals',
            hue="cols", facet_kws={'sharey': False, 'sharex': False})

#Individual density plots to look at specific distributions
for i in nfl_features.columns:
    plt.figure()
    sns.kdeplot(nfl_features[i])
